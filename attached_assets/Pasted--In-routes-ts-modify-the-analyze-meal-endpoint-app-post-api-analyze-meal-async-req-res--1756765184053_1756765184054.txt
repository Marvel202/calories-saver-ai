// In routes.ts, modify the analyze-meal endpoint
app.post("/api/analyze-meal", async (req, res) => {
  try {
    const { imageUrl } = req.body;
    
    if (!imageUrl) {
      return res.status(400).json({ error: "Image URL is required" });
    }

    // Normalize the object path for storage
    const objectStorageService = new ObjectStorageService();
    const normalizedPath = objectStorageService.normalizeObjectEntityPath(imageUrl);

    // Create the full storage URL
    const fullImageUrl = imageUrl.startsWith('http') ? imageUrl : 
      `https://storage.googleapis.com/replit-objstore-38096412-da93-467f-a5b2-946fefe42efe/.private${imageUrl}`;

    // Fetch the image binary data
    const imageResponse = await fetch(fullImageUrl);
    if (!imageResponse.ok) {
      console.error("Failed to fetch image from storage:", imageResponse.status);
      throw new Error("Failed to fetch image from storage");
    }

    // Get image data
    const imageBuffer = await imageResponse.arrayBuffer();
    const mimeType = imageResponse.headers.get('content-type') || 'image/jpeg';

    // Call n8n webhook with multipart/form-data
    const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || "https://glorious-orca-novel.ngrok-free.app/webhook-test/e52946b4-075f-472b-8242-d245d1b12a92/";
    
    // Create FormData
    const FormData = require('form-data');
    const formData = new FormData();
    
    // Add the image as a binary file
    formData.append('image', Buffer.from(imageBuffer), {
      filename: 'image.jpg',
      contentType: mimeType,
    });
    
    // Add additional metadata as form fields
    formData.append('imageUrl', normalizedPath);
    formData.append('originalUrl', fullImageUrl);
    formData.append('timestamp', new Date().toISOString());
    
    console.log("Sending binary data to n8n webhook:", n8nWebhookUrl);
    
    const n8nResponse = await fetch(n8nWebhookUrl, {
      method: "POST",
      headers: {
        ...formData.getHeaders(),
        "ngrok-skip-browser-warning": "true"
      },
      body: formData,
    });

    // Rest of your code remains the same...
  } catch (error) {
    console.error("Error analyzing meal:", error);
    res.status(500).json({ 
      error: "Failed to analyze meal",
      details: error instanceof Error ? error.message : "Unknown error"
    });
  }
});