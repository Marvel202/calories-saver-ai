import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { ObjectStorageService, ObjectNotFoundError } from "./objectStorage";
import { insertMealAnalysisSchema, nutritionDataSchema } from "@shared/schema";
import { z } from "zod";
import FormData from "form-data";
import fetch from "node-fetch"; // Add this import

// ... rest of your code ...

  // Meal analysis endpoint
  app.post("/api/analyze-meal", async (req, res) => {
    try {
      const { imageUrl } = req.body;
      
      if (!imageUrl) {
        return res.status(400).json({ error: "Image URL is required" });
      }

      // Normalize the object path for storage
      const objectStorageService = new ObjectStorageService();
      const normalizedPath = objectStorageService.normalizeObjectEntityPath(imageUrl);

      // Create the full storage URL
      const fullImageUrl = imageUrl.startsWith('http') ? imageUrl : 
        `https://storage.googleapis.com/replit-objstore-38096412-da93-467f-a5b2-946fefe42efe/.private${imageUrl}`;

      // Fetch the image binary data using native fetch (it's fine for downloading)
      console.log("Fetching image from:", fullImageUrl);
      const imageResponse = await global.fetch(fullImageUrl); // Use global.fetch for downloading
      if (!imageResponse.ok) {
        console.error("Failed to fetch image from storage:", imageResponse.status);
        throw new Error("Failed to fetch image from storage");
      }

      // Get image data
      const imageBuffer = await imageResponse.arrayBuffer();
      const mimeType = imageResponse.headers.get('content-type') || 'image/jpeg';
      
      console.log(`Image fetched successfully: ${imageBuffer.byteLength} bytes, ${mimeType}`);

      // Call n8n webhook with multipart/form-data
      const n8nWebhookUrl = process.env.N8N_WEBHOOK_URL || "https://glorious-orca-novel.ngrok-free.app/webhook-test/e52946b4-075f-472b-8242-d245d1b12a92/";
      
      // Create FormData
      const formData = new FormData();
      
      // Add the image as a binary file
      const imageBufferNode = Buffer.from(imageBuffer);
      formData.append('image', imageBufferNode, {
        filename: `image.${mimeType.split('/')[1] || 'jpg'}`,
        contentType: mimeType,
      });
      
      // Add additional metadata as form fields
      formData.append('imageUrl', normalizedPath);
      formData.append('originalUrl', fullImageUrl);
      formData.append('timestamp', new Date().toISOString());
      formData.append('mimeType', mimeType);
      
      console.log("Sending binary data to n8n webhook:", n8nWebhookUrl);
      
      // Use node-fetch for multipart upload
      const n8nResponse = await fetch(n8nWebhookUrl, {
        method: "POST",
        headers: {
          ...formData.getHeaders(),
          "ngrok-skip-browser-warning": "true"
        },
        body: formData, // node-fetch handles form-data streams properly
      });

      if (!n8nResponse.ok) {
        const responseText = await n8nResponse.text();
        console.error("n8n webhook error response:", responseText);
        console.error("Response status:", n8nResponse.status);
        
        if (responseText.includes("test mode") || responseText.includes("Execute workflow")) {
          throw new Error("n8n webhook is in test mode. Please click 'Execute workflow' in n8n canvas and try again.");
        }
        
        throw new Error(`n8n workflow failed: ${n8nResponse.status} - ${responseText}`);
      }

      const n8nData = await n8nResponse.json();
      console.log("n8n response received:", Object.keys(n8nData));
      
      // Validate the nutrition data from n8n
      const nutrition = nutritionDataSchema.parse(n8nData.nutrition || n8nData);
      
      // Store the analysis in memory
      const analysis = await storage.createMealAnalysis({
        imageUrl: normalizedPath,
        nutrition,
      });

      res.json({
        analysisId: analysis.id,
        nutrition,
        imageUrl: normalizedPath,
      });

    } catch (error) {
      console.error("Error analyzing meal:", error);
      res.status(500).json({ 
        error: "Failed to analyze meal",
        details: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });